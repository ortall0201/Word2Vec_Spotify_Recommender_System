# -*- coding: utf-8 -*-
"""Spotify_Recommender_System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oodI-OxLr6octvE3IfT31vT6rFfOa6Tk
"""

import streamlit as st
from gensim.models import Word2Vec
import os
import requests

# Function to download individual model files
def download_model():
    base_url = "https://storage.googleapis.com/spotify-word2vec-model/"  # Update with your bucket URL
    files = [
        "final4_word2vec_model.model",
        "final4_word2vec_model.model.syn1neg.npy",
        "final4_word2vec_model.model.wv.vectors.npy"
    ]
    local_dir = "model_files"
    os.makedirs(local_dir, exist_ok=True)

    for file_name in files:
        file_url = f"{base_url}{file_name}"
        local_path = os.path.join(local_dir, file_name)
        if not os.path.exists(local_path):
            st.info(f"Downloading {file_name}...")
            try:
                response = requests.get(file_url, timeout=60)
                response.raise_for_status()  # Raise an error for failed requests
                with open(local_path, "wb") as f:
                    f.write(response.content)
                st.success(f"Downloaded {file_name}")
                st.write(f"{file_name} downloaded, size: {os.path.getsize(local_path)} bytes")  # Debugging: show file size
            except requests.exceptions.RequestException as e:
                st.error(f"Error downloading {file_name}: {e}")
                st.stop()
        else:
            st.info(f"{file_name} already exists locally.")
    return local_dir

# Step 1: Download the model files
st.info("Downloading model from Google Cloud...")
model_dir = download_model()

# Debugging: List directory contents
st.write("Model directory contents:", os.listdir(model_dir))

# Step 2: Load the Word2Vec model
model_path = os.path.join(model_dir, "final4_word2vec_model.model")
try:
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found at: {model_path}")
    model = Word2Vec.load(model_path)
    st.success("Model loaded successfully!")
    st.write(f"Vocabulary size: {len(model.wv.index_to_key)}")
except Exception as e:
    st.error(f"Error loading model: {e}")
    st.stop()

# Step 3: Streamlit UI for Recommendations
st.title("ðŸŽµ Artist-Based Playlist Recommender ðŸŽµ")
st.markdown("Enter your preferred **artist:track** to get a personalized playlist!")

# Input box for user
user_input = st.text_input("Enter a song (artistname:trackname):", "").strip().lower()

# Recommendation logic
if user_input:
    try:
        # Check if the input exists in the vocabulary
        if user_input in model.wv:
            recommendations = model.wv.most_similar(user_input, topn=10)  # Get top 10 similar items
            st.subheader(f"Recommendations for **{user_input}**:")
            for idx, (rec, score) in enumerate(recommendations, start=1):
                st.write(f"{idx}. {rec} _(similarity: {score:.4f})_")
        else:
            st.error(f"'{user_input}' is not in the model's vocabulary. Try another song.")
    except Exception as e:
        st.error(f"Error during recommendation: {e}")

# Footer
st.markdown("""
---
**Disclaimer:** This app is for educational purposes only and is not affiliated with Spotify.
""")